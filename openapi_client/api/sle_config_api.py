# coding: utf-8

"""
    sle-management-client

    Python SLE Provider Management Client

    OpenAPI spec version: 0.1.0
    Contact: oss@visionspace.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class SleConfigApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_sle_config(self, param, **kwargs):  # noqa: E501
        """Returns the current value of a SLE configuration parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sle_config(param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SleConfigParams param: Name of the parameter to return (required)
        :return: SleConfigParamsValues
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sle_config_with_http_info(param, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sle_config_with_http_info(param, **kwargs)  # noqa: E501
            return data

    def get_sle_config_with_http_info(self, param, **kwargs):  # noqa: E501
        """Returns the current value of a SLE configuration parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sle_config_with_http_info(param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SleConfigParams param: Name of the parameter to return (required)
        :return: SleConfigParamsValues
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['param']  # noqa: E501
        all_params.append('authentication')
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sle_config" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'param' is set
        if ('param' not in local_var_params or
                local_var_params['param'] is None):
            raise ApiValueError("Missing the required parameter `param` when calling `get_sle_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'param' in local_var_params:
            path_params['param'] = local_var_params['param']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        if 'authentication' in local_var_params:
            auth_settings = [local_var_params['authentication']]
        else:
            auth_settings = []

        return self.api_client.call_api(
            '/sle-config/{param}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SleConfigParamsValues',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sle_config_list(self, **kwargs):  # noqa: E501
        """Get a list of the available configuration parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sle_config_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SleConfigParams]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sle_config_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_sle_config_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_sle_config_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of the available configuration parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sle_config_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[SleConfigParams]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('authentication')
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sle_config_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        if 'authentication' in local_var_params:
            auth_settings = [local_var_params['authentication']]
        else:
            auth_settings = []

        return self.api_client.call_api(
            '/sle-config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SleConfigParams]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_sle_config(self, param, **kwargs):  # noqa: E501
        """Update a SLE configuration parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sle_config(param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SleConfigParams param: Name of the parameter that needs to be updated (required)
        :param SleConfigParamsValues sle_config_params_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_sle_config_with_http_info(param, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_sle_config_with_http_info(param, **kwargs)  # noqa: E501
            return data

    def patch_sle_config_with_http_info(self, param, **kwargs):  # noqa: E501
        """Update a SLE configuration parameter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_sle_config_with_http_info(param, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SleConfigParams param: Name of the parameter that needs to be updated (required)
        :param SleConfigParamsValues sle_config_params_values:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['param', 'sle_config_params_values']  # noqa: E501
        all_params.append('authentication')
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_sle_config" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'param' is set
        if ('param' not in local_var_params or
                local_var_params['param'] is None):
            raise ApiValueError("Missing the required parameter `param` when calling `patch_sle_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'param' in local_var_params:
            path_params['param'] = local_var_params['param']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'sle_config_params_values' in local_var_params:
            body_params = local_var_params['sle_config_params_values']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        if 'authentication' in local_var_params:
            auth_settings = [local_var_params['authentication']]
        else:
            auth_settings = []

        return self.api_client.call_api(
            '/sle-config/{param}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
